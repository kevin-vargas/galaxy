// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	entity "github.com/kevin-vargas/galaxy/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Triangulation is an autogenerated mock type for the Triangulation type
type Triangulation struct {
	mock.Mock
}

// GetMessage provides a mock function with given fields: _a0
func (_m *Triangulation) GetMessage(_a0 ...[]string) (string, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...[]string) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...[]string) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoints provides a mock function with given fields: positions
func (_m *Triangulation) GetPoints(positions ...*entity.Position) ([]*entity.Point, error) {
	_va := make([]interface{}, len(positions))
	for _i := range positions {
		_va[_i] = positions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*entity.Point
	if rf, ok := ret.Get(0).(func(...*entity.Position) []*entity.Point); ok {
		r0 = rf(positions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Point)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*entity.Position) error); ok {
		r1 = rf(positions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
